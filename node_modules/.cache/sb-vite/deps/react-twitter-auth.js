import {
  require_react
} from "./chunk-UYMBRTCP.js";
import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/react-twitter-auth/lib/react-twitter-auth-component.js
var require_react_twitter_auth_component = __commonJS({
  "node_modules/react-twitter-auth/lib/react-twitter-auth-component.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory(require_react());
      else if (typeof define === "function" && define.amd)
        define(["react"], factory);
      else if (typeof exports === "object")
        exports["react-twitter-login"] = factory(require_react());
      else
        root["react-twitter-login"] = factory(root["React"]);
    })(exports, function(__WEBPACK_EXTERNAL_MODULE_0__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 4);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE_0__;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            if (true) {
              var ReactIs = __webpack_require__(2);
              var throwOnDirectAccess = true;
              module2.exports = __webpack_require__(6)(ReactIs.isElement, throwOnDirectAccess);
            } else {
              module2.exports = null();
            }
          },
          /* 2 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            if (false) {
              module2.exports = null;
            } else {
              module2.exports = __webpack_require__(5);
            }
          },
          /* 3 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
            module2.exports = ReactPropTypesSecret;
          },
          /* 4 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _react = __webpack_require__(0);
            var _react2 = _interopRequireDefault(_react);
            var _propTypes = __webpack_require__(1);
            var _propTypes2 = _interopRequireDefault(_propTypes);
            __webpack_require__(9);
            __webpack_require__(10);
            var _twitter = __webpack_require__(12);
            var _twitter2 = _interopRequireDefault(_twitter);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TwitterLogin = function(_Component) {
              _inherits(TwitterLogin2, _Component);
              function TwitterLogin2(props) {
                _classCallCheck(this, TwitterLogin2);
                var _this = _possibleConstructorReturn(this, (TwitterLogin2.__proto__ || Object.getPrototypeOf(TwitterLogin2)).call(this, props));
                _this.onButtonClick = _this.onButtonClick.bind(_this);
                return _this;
              }
              _createClass(TwitterLogin2, [{
                key: "onButtonClick",
                value: function onButtonClick(e) {
                  e.preventDefault();
                  return this.getRequestToken();
                }
              }, {
                key: "getHeaders",
                value: function getHeaders() {
                  var headers = Object.assign({}, this.props.customHeaders);
                  headers["Content-Type"] = "application/json";
                  return headers;
                }
              }, {
                key: "getRequestToken",
                value: function getRequestToken() {
                  var _this2 = this;
                  var popup = this.openPopup();
                  return window.fetch(this.props.requestTokenUrl, {
                    method: "POST",
                    credentials: this.props.credentials,
                    headers: this.getHeaders()
                  }).then(function(response) {
                    return response.json();
                  }).then(function(data) {
                    var authenticationUrl = "https://api.twitter.com/oauth/authenticate?oauth_token=" + data.oauth_token + "&force_login=" + _this2.props.forceLogin;
                    if (_this2.props.screenName) {
                      authenticationUrl = authenticationUrl + "&screen_name=" + _this2.props.screenName;
                    }
                    popup.location = authenticationUrl;
                    _this2.polling(popup);
                  }).catch(function(error) {
                    popup.close();
                    return _this2.props.onFailure(error);
                  });
                }
              }, {
                key: "openPopup",
                value: function openPopup() {
                  var w = this.props.dialogWidth;
                  var h = this.props.dialogHeight;
                  var left = screen.width / 2 - w / 2;
                  var top = screen.height / 2 - h / 2;
                  return window.open("", "", "toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=" + w + ", height=" + h + ", top=" + top + ", left=" + left);
                }
              }, {
                key: "polling",
                value: function polling(popup) {
                  var _this3 = this;
                  var polling2 = setInterval(function() {
                    if (!popup || popup.closed || popup.closed === void 0) {
                      clearInterval(polling2);
                      _this3.props.onFailure(new Error("Popup has been closed by user"));
                    }
                    var closeDialog = function closeDialog2() {
                      clearInterval(polling2);
                      popup.close();
                    };
                    try {
                      if (!popup.location.hostname.includes("api.twitter.com") && !popup.location.hostname == "") {
                        if (popup.location.search) {
                          var query = new URLSearchParams(popup.location.search);
                          var oauthToken = query.get("oauth_token");
                          var oauthVerifier = query.get("oauth_verifier");
                          closeDialog();
                          return _this3.getOauthToken(oauthVerifier, oauthToken);
                        } else {
                          closeDialog();
                          return _this3.props.onFailure(new Error("OAuth redirect has occurred but no query or hash parameters were found. They were either not set during the redirect, or were removed—typically by a routing library—before Twitter react component could read it."));
                        }
                      }
                    } catch (error) {
                    }
                  }, 500);
                }
              }, {
                key: "getOauthToken",
                value: function getOauthToken(oAuthVerifier, oauthToken) {
                  var _this4 = this;
                  return window.fetch(this.props.loginUrl + "?oauth_verifier=" + oAuthVerifier + "&oauth_token=" + oauthToken, {
                    method: "POST",
                    credentials: this.props.credentials,
                    headers: this.getHeaders()
                  }).then(function(response) {
                    _this4.props.onSuccess(response);
                  }).catch(function(error) {
                    return _this4.props.onFailure(error);
                  });
                }
              }, {
                key: "getDefaultButtonContent",
                value: function getDefaultButtonContent() {
                  var defaultIcon = this.props.showIcon ? _react2.default.createElement(_twitter2.default, { color: "#00aced", size: 25 }) : null;
                  return _react2.default.createElement(
                    "span",
                    null,
                    defaultIcon,
                    " ",
                    this.props.text
                  );
                }
              }, {
                key: "render",
                value: function render() {
                  var twitterButton = _react2.default.createElement(this.props.tag, {
                    onClick: this.onButtonClick,
                    style: this.props.style,
                    disabled: this.props.disabled,
                    className: this.props.className
                  }, this.props.children ? this.props.children : this.getDefaultButtonContent());
                  return twitterButton;
                }
              }]);
              return TwitterLogin2;
            }(_react.Component);
            TwitterLogin.propTypes = {
              tag: _propTypes2.default.string,
              text: _propTypes2.default.string,
              loginUrl: _propTypes2.default.string.isRequired,
              requestTokenUrl: _propTypes2.default.string.isRequired,
              onFailure: _propTypes2.default.func.isRequired,
              onSuccess: _propTypes2.default.func.isRequired,
              disabled: _propTypes2.default.bool,
              style: _propTypes2.default.object,
              className: _propTypes2.default.string,
              dialogWidth: _propTypes2.default.number,
              dialogHeight: _propTypes2.default.number,
              showIcon: _propTypes2.default.bool,
              credentials: _propTypes2.default.oneOf(["omit", "same-origin", "include"]),
              customHeaders: _propTypes2.default.object,
              forceLogin: _propTypes2.default.bool,
              screenName: _propTypes2.default.string
            };
            TwitterLogin.defaultProps = {
              tag: "button",
              text: "Sign in with Twitter",
              disabled: false,
              dialogWidth: 600,
              dialogHeight: 400,
              showIcon: true,
              credentials: "same-origin",
              customHeaders: {},
              forceLogin: false,
              screenName: ""
            };
            exports2.default = TwitterLogin;
          },
          /* 5 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            if (true) {
              (function() {
                "use strict";
                Object.defineProperty(exports2, "__esModule", { value: true });
                var hasSymbol = typeof Symbol === "function" && Symbol.for;
                var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
                var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
                var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
                var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
                var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
                var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
                var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
                var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
                var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
                var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
                var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
                var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
                var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
                function isValidElementType(type) {
                  return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
                }
                var lowPriorityWarning = function() {
                };
                {
                  var printWarning = function(format) {
                    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      args[_key - 1] = arguments[_key];
                    }
                    var argIndex = 0;
                    var message = "Warning: " + format.replace(/%s/g, function() {
                      return args[argIndex++];
                    });
                    if (typeof console !== "undefined") {
                      console.warn(message);
                    }
                    try {
                      throw new Error(message);
                    } catch (x) {
                    }
                  };
                  lowPriorityWarning = function(condition, format) {
                    if (format === void 0) {
                      throw new Error("`lowPriorityWarning(condition, format, ...args)` requires a warning message argument");
                    }
                    if (!condition) {
                      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                        args[_key2 - 2] = arguments[_key2];
                      }
                      printWarning.apply(void 0, [format].concat(args));
                    }
                  };
                }
                var lowPriorityWarning$1 = lowPriorityWarning;
                function typeOf(object) {
                  if (typeof object === "object" && object !== null) {
                    var $$typeof = object.$$typeof;
                    switch ($$typeof) {
                      case REACT_ELEMENT_TYPE:
                        var type = object.type;
                        switch (type) {
                          case REACT_ASYNC_MODE_TYPE:
                          case REACT_CONCURRENT_MODE_TYPE:
                          case REACT_FRAGMENT_TYPE:
                          case REACT_PROFILER_TYPE:
                          case REACT_STRICT_MODE_TYPE:
                          case REACT_SUSPENSE_TYPE:
                            return type;
                          default:
                            var $$typeofType = type && type.$$typeof;
                            switch ($$typeofType) {
                              case REACT_CONTEXT_TYPE:
                              case REACT_FORWARD_REF_TYPE:
                              case REACT_PROVIDER_TYPE:
                                return $$typeofType;
                              default:
                                return $$typeof;
                            }
                        }
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PORTAL_TYPE:
                        return $$typeof;
                    }
                  }
                  return void 0;
                }
                var AsyncMode = REACT_ASYNC_MODE_TYPE;
                var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
                var ContextConsumer = REACT_CONTEXT_TYPE;
                var ContextProvider = REACT_PROVIDER_TYPE;
                var Element = REACT_ELEMENT_TYPE;
                var ForwardRef = REACT_FORWARD_REF_TYPE;
                var Fragment = REACT_FRAGMENT_TYPE;
                var Lazy = REACT_LAZY_TYPE;
                var Memo = REACT_MEMO_TYPE;
                var Portal = REACT_PORTAL_TYPE;
                var Profiler = REACT_PROFILER_TYPE;
                var StrictMode = REACT_STRICT_MODE_TYPE;
                var Suspense = REACT_SUSPENSE_TYPE;
                var hasWarnedAboutDeprecatedIsAsyncMode = false;
                function isAsyncMode(object) {
                  {
                    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                      hasWarnedAboutDeprecatedIsAsyncMode = true;
                      lowPriorityWarning$1(false, "The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
                    }
                  }
                  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
                }
                function isConcurrentMode(object) {
                  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
                }
                function isContextConsumer(object) {
                  return typeOf(object) === REACT_CONTEXT_TYPE;
                }
                function isContextProvider(object) {
                  return typeOf(object) === REACT_PROVIDER_TYPE;
                }
                function isElement(object) {
                  return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
                }
                function isForwardRef(object) {
                  return typeOf(object) === REACT_FORWARD_REF_TYPE;
                }
                function isFragment(object) {
                  return typeOf(object) === REACT_FRAGMENT_TYPE;
                }
                function isLazy(object) {
                  return typeOf(object) === REACT_LAZY_TYPE;
                }
                function isMemo(object) {
                  return typeOf(object) === REACT_MEMO_TYPE;
                }
                function isPortal(object) {
                  return typeOf(object) === REACT_PORTAL_TYPE;
                }
                function isProfiler(object) {
                  return typeOf(object) === REACT_PROFILER_TYPE;
                }
                function isStrictMode(object) {
                  return typeOf(object) === REACT_STRICT_MODE_TYPE;
                }
                function isSuspense(object) {
                  return typeOf(object) === REACT_SUSPENSE_TYPE;
                }
                exports2.typeOf = typeOf;
                exports2.AsyncMode = AsyncMode;
                exports2.ConcurrentMode = ConcurrentMode;
                exports2.ContextConsumer = ContextConsumer;
                exports2.ContextProvider = ContextProvider;
                exports2.Element = Element;
                exports2.ForwardRef = ForwardRef;
                exports2.Fragment = Fragment;
                exports2.Lazy = Lazy;
                exports2.Memo = Memo;
                exports2.Portal = Portal;
                exports2.Profiler = Profiler;
                exports2.StrictMode = StrictMode;
                exports2.Suspense = Suspense;
                exports2.isValidElementType = isValidElementType;
                exports2.isAsyncMode = isAsyncMode;
                exports2.isConcurrentMode = isConcurrentMode;
                exports2.isContextConsumer = isContextConsumer;
                exports2.isContextProvider = isContextProvider;
                exports2.isElement = isElement;
                exports2.isForwardRef = isForwardRef;
                exports2.isFragment = isFragment;
                exports2.isLazy = isLazy;
                exports2.isMemo = isMemo;
                exports2.isPortal = isPortal;
                exports2.isProfiler = isProfiler;
                exports2.isStrictMode = isStrictMode;
                exports2.isSuspense = isSuspense;
              })();
            }
          },
          /* 6 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var ReactIs = __webpack_require__(2);
            var assign = __webpack_require__(7);
            var ReactPropTypesSecret = __webpack_require__(3);
            var checkPropTypes = __webpack_require__(8);
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            var printWarning = function() {
            };
            if (true) {
              printWarning = function(text) {
                var message = "Warning: " + text;
                if (typeof console !== "undefined") {
                  console.error(message);
                }
                try {
                  throw new Error(message);
                } catch (x) {
                }
              };
            }
            function emptyFunctionThatReturnsNull() {
              return null;
            }
            module2.exports = function(isValidElement, throwOnDirectAccess) {
              var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
              var FAUX_ITERATOR_SYMBOL = "@@iterator";
              function getIteratorFn(maybeIterable) {
                var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
                if (typeof iteratorFn === "function") {
                  return iteratorFn;
                }
              }
              var ANONYMOUS = "<<anonymous>>";
              var ReactPropTypes = {
                array: createPrimitiveTypeChecker("array"),
                bool: createPrimitiveTypeChecker("boolean"),
                func: createPrimitiveTypeChecker("function"),
                number: createPrimitiveTypeChecker("number"),
                object: createPrimitiveTypeChecker("object"),
                string: createPrimitiveTypeChecker("string"),
                symbol: createPrimitiveTypeChecker("symbol"),
                any: createAnyTypeChecker(),
                arrayOf: createArrayOfTypeChecker,
                element: createElementTypeChecker(),
                elementType: createElementTypeTypeChecker(),
                instanceOf: createInstanceTypeChecker,
                node: createNodeChecker(),
                objectOf: createObjectOfTypeChecker,
                oneOf: createEnumTypeChecker,
                oneOfType: createUnionTypeChecker,
                shape: createShapeTypeChecker,
                exact: createStrictShapeTypeChecker
              };
              function is(x, y) {
                if (x === y) {
                  return x !== 0 || 1 / x === 1 / y;
                } else {
                  return x !== x && y !== y;
                }
              }
              function PropTypeError(message) {
                this.message = message;
                this.stack = "";
              }
              PropTypeError.prototype = Error.prototype;
              function createChainableTypeChecker(validate) {
                if (true) {
                  var manualPropTypeCallCache = {};
                  var manualPropTypeWarningCount = 0;
                }
                function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
                  componentName = componentName || ANONYMOUS;
                  propFullName = propFullName || propName;
                  if (secret !== ReactPropTypesSecret) {
                    if (throwOnDirectAccess) {
                      var err = new Error(
                        "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                      );
                      err.name = "Invariant Violation";
                      throw err;
                    } else if (typeof console !== "undefined") {
                      var cacheKey = componentName + ":" + propName;
                      if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                      manualPropTypeWarningCount < 3) {
                        printWarning(
                          "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                        );
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                      }
                    }
                  }
                  if (props[propName] == null) {
                    if (isRequired) {
                      if (props[propName] === null) {
                        return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                      }
                      return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                    }
                    return null;
                  } else {
                    return validate(props, propName, componentName, location, propFullName);
                  }
                }
                var chainedCheckType = checkType.bind(null, false);
                chainedCheckType.isRequired = checkType.bind(null, true);
                return chainedCheckType;
              }
              function createPrimitiveTypeChecker(expectedType) {
                function validate(props, propName, componentName, location, propFullName, secret) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== expectedType) {
                    var preciseType = getPreciseType(propValue);
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createAnyTypeChecker() {
                return createChainableTypeChecker(emptyFunctionThatReturnsNull);
              }
              function createArrayOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                  if (typeof typeChecker !== "function") {
                    return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
                  }
                  var propValue = props[propName];
                  if (!Array.isArray(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
                  }
                  for (var i = 0; i < propValue.length; i++) {
                    var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
                    if (error instanceof Error) {
                      return error;
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createElementTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  if (!isValidElement(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createElementTypeTypeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  if (!ReactIs.isValidElementType(propValue)) {
                    var propType = getPropType(propValue);
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createInstanceTypeChecker(expectedClass) {
                function validate(props, propName, componentName, location, propFullName) {
                  if (!(props[propName] instanceof expectedClass)) {
                    var expectedClassName = expectedClass.name || ANONYMOUS;
                    var actualClassName = getClassName(props[propName]);
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createEnumTypeChecker(expectedValues) {
                if (!Array.isArray(expectedValues)) {
                  if (true) {
                    if (arguments.length > 1) {
                      printWarning(
                        "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                      );
                    } else {
                      printWarning("Invalid argument supplied to oneOf, expected an array.");
                    }
                  }
                  return emptyFunctionThatReturnsNull;
                }
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  for (var i = 0; i < expectedValues.length; i++) {
                    if (is(propValue, expectedValues[i])) {
                      return null;
                    }
                  }
                  var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                    var type = getPreciseType(value);
                    if (type === "symbol") {
                      return String(value);
                    }
                    return value;
                  });
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
                }
                return createChainableTypeChecker(validate);
              }
              function createObjectOfTypeChecker(typeChecker) {
                function validate(props, propName, componentName, location, propFullName) {
                  if (typeof typeChecker !== "function") {
                    return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
                  }
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== "object") {
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
                  }
                  for (var key in propValue) {
                    if (has(propValue, key)) {
                      var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                      if (error instanceof Error) {
                        return error;
                      }
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createUnionTypeChecker(arrayOfTypeCheckers) {
                if (!Array.isArray(arrayOfTypeCheckers)) {
                  true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
                  return emptyFunctionThatReturnsNull;
                }
                for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                  var checker = arrayOfTypeCheckers[i];
                  if (typeof checker !== "function") {
                    printWarning(
                      "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
                    );
                    return emptyFunctionThatReturnsNull;
                  }
                }
                function validate(props, propName, componentName, location, propFullName) {
                  for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
                    var checker2 = arrayOfTypeCheckers[i2];
                    if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                      return null;
                    }
                  }
                  return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
                }
                return createChainableTypeChecker(validate);
              }
              function createNodeChecker() {
                function validate(props, propName, componentName, location, propFullName) {
                  if (!isNode(props[propName])) {
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== "object") {
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                  }
                  for (var key in shapeTypes) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                      continue;
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                    if (error) {
                      return error;
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function createStrictShapeTypeChecker(shapeTypes) {
                function validate(props, propName, componentName, location, propFullName) {
                  var propValue = props[propName];
                  var propType = getPropType(propValue);
                  if (propType !== "object") {
                    return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
                  }
                  var allKeys = assign({}, props[propName], shapeTypes);
                  for (var key in allKeys) {
                    var checker = shapeTypes[key];
                    if (!checker) {
                      return new PropTypeError(
                        "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                      );
                    }
                    var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                    if (error) {
                      return error;
                    }
                  }
                  return null;
                }
                return createChainableTypeChecker(validate);
              }
              function isNode(propValue) {
                switch (typeof propValue) {
                  case "number":
                  case "string":
                  case "undefined":
                    return true;
                  case "boolean":
                    return !propValue;
                  case "object":
                    if (Array.isArray(propValue)) {
                      return propValue.every(isNode);
                    }
                    if (propValue === null || isValidElement(propValue)) {
                      return true;
                    }
                    var iteratorFn = getIteratorFn(propValue);
                    if (iteratorFn) {
                      var iterator = iteratorFn.call(propValue);
                      var step;
                      if (iteratorFn !== propValue.entries) {
                        while (!(step = iterator.next()).done) {
                          if (!isNode(step.value)) {
                            return false;
                          }
                        }
                      } else {
                        while (!(step = iterator.next()).done) {
                          var entry = step.value;
                          if (entry) {
                            if (!isNode(entry[1])) {
                              return false;
                            }
                          }
                        }
                      }
                    } else {
                      return false;
                    }
                    return true;
                  default:
                    return false;
                }
              }
              function isSymbol(propType, propValue) {
                if (propType === "symbol") {
                  return true;
                }
                if (!propValue) {
                  return false;
                }
                if (propValue["@@toStringTag"] === "Symbol") {
                  return true;
                }
                if (typeof Symbol === "function" && propValue instanceof Symbol) {
                  return true;
                }
                return false;
              }
              function getPropType(propValue) {
                var propType = typeof propValue;
                if (Array.isArray(propValue)) {
                  return "array";
                }
                if (propValue instanceof RegExp) {
                  return "object";
                }
                if (isSymbol(propType, propValue)) {
                  return "symbol";
                }
                return propType;
              }
              function getPreciseType(propValue) {
                if (typeof propValue === "undefined" || propValue === null) {
                  return "" + propValue;
                }
                var propType = getPropType(propValue);
                if (propType === "object") {
                  if (propValue instanceof Date) {
                    return "date";
                  } else if (propValue instanceof RegExp) {
                    return "regexp";
                  }
                }
                return propType;
              }
              function getPostfixForTypeWarning(value) {
                var type = getPreciseType(value);
                switch (type) {
                  case "array":
                  case "object":
                    return "an " + type;
                  case "boolean":
                  case "date":
                  case "regexp":
                    return "a " + type;
                  default:
                    return type;
                }
              }
              function getClassName(propValue) {
                if (!propValue.constructor || !propValue.constructor.name) {
                  return ANONYMOUS;
                }
                return propValue.constructor.name;
              }
              ReactPropTypes.checkPropTypes = checkPropTypes;
              ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
              ReactPropTypes.PropTypes = ReactPropTypes;
              return ReactPropTypes;
            };
          },
          /* 7 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var getOwnPropertySymbols = Object.getOwnPropertySymbols;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var propIsEnumerable = Object.prototype.propertyIsEnumerable;
            function toObject(val) {
              if (val === null || val === void 0) {
                throw new TypeError("Object.assign cannot be called with null or undefined");
              }
              return Object(val);
            }
            function shouldUseNative() {
              try {
                if (!Object.assign) {
                  return false;
                }
                var test1 = new String("abc");
                test1[5] = "de";
                if (Object.getOwnPropertyNames(test1)[0] === "5") {
                  return false;
                }
                var test2 = {};
                for (var i = 0; i < 10; i++) {
                  test2["_" + String.fromCharCode(i)] = i;
                }
                var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
                  return test2[n];
                });
                if (order2.join("") !== "0123456789") {
                  return false;
                }
                var test3 = {};
                "abcdefghijklmnopqrst".split("").forEach(function(letter) {
                  test3[letter] = letter;
                });
                if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
                  return false;
                }
                return true;
              } catch (err) {
                return false;
              }
            }
            module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
              var from;
              var to = toObject(target);
              var symbols;
              for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) {
                  if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                  }
                }
                if (getOwnPropertySymbols) {
                  symbols = getOwnPropertySymbols(from);
                  for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                      to[symbols[i]] = from[symbols[i]];
                    }
                  }
                }
              }
              return to;
            };
          },
          /* 8 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var printWarning = function() {
            };
            if (true) {
              var ReactPropTypesSecret = __webpack_require__(3);
              var loggedTypeFailures = {};
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              printWarning = function(text) {
                var message = "Warning: " + text;
                if (typeof console !== "undefined") {
                  console.error(message);
                }
                try {
                  throw new Error(message);
                } catch (x) {
                }
              };
            }
            function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
              if (true) {
                for (var typeSpecName in typeSpecs) {
                  if (has(typeSpecs, typeSpecName)) {
                    var error;
                    try {
                      if (typeof typeSpecs[typeSpecName] !== "function") {
                        var err = Error(
                          (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`."
                        );
                        err.name = "Invariant Violation";
                        throw err;
                      }
                      error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                    } catch (ex) {
                      error = ex;
                    }
                    if (error && !(error instanceof Error)) {
                      printWarning(
                        (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                      );
                    }
                    if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                      loggedTypeFailures[error.message] = true;
                      var stack = getStack ? getStack() : "";
                      printWarning(
                        "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                      );
                    }
                  }
                }
              }
            }
            checkPropTypes.resetWarningCache = function() {
              if (true) {
                loggedTypeFailures = {};
              }
            };
            module2.exports = checkPropTypes;
          },
          /* 9 */
          /***/
          function(module2, exports2) {
            (function(self2) {
              "use strict";
              if (self2.fetch) {
                return;
              }
              var support = {
                searchParams: "URLSearchParams" in self2,
                iterable: "Symbol" in self2 && "iterator" in Symbol,
                blob: "FileReader" in self2 && "Blob" in self2 && function() {
                  try {
                    new Blob();
                    return true;
                  } catch (e) {
                    return false;
                  }
                }(),
                formData: "FormData" in self2,
                arrayBuffer: "ArrayBuffer" in self2
              };
              if (support.arrayBuffer) {
                var viewClasses = [
                  "[object Int8Array]",
                  "[object Uint8Array]",
                  "[object Uint8ClampedArray]",
                  "[object Int16Array]",
                  "[object Uint16Array]",
                  "[object Int32Array]",
                  "[object Uint32Array]",
                  "[object Float32Array]",
                  "[object Float64Array]"
                ];
                var isDataView = function(obj) {
                  return obj && DataView.prototype.isPrototypeOf(obj);
                };
                var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                  return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
                };
              }
              function normalizeName(name) {
                if (typeof name !== "string") {
                  name = String(name);
                }
                if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
                  throw new TypeError("Invalid character in header field name");
                }
                return name.toLowerCase();
              }
              function normalizeValue(value) {
                if (typeof value !== "string") {
                  value = String(value);
                }
                return value;
              }
              function iteratorFor(items) {
                var iterator = {
                  next: function() {
                    var value = items.shift();
                    return { done: value === void 0, value };
                  }
                };
                if (support.iterable) {
                  iterator[Symbol.iterator] = function() {
                    return iterator;
                  };
                }
                return iterator;
              }
              function Headers(headers) {
                this.map = {};
                if (headers instanceof Headers) {
                  headers.forEach(function(value, name) {
                    this.append(name, value);
                  }, this);
                } else if (Array.isArray(headers)) {
                  headers.forEach(function(header) {
                    this.append(header[0], header[1]);
                  }, this);
                } else if (headers) {
                  Object.getOwnPropertyNames(headers).forEach(function(name) {
                    this.append(name, headers[name]);
                  }, this);
                }
              }
              Headers.prototype.append = function(name, value) {
                name = normalizeName(name);
                value = normalizeValue(value);
                var oldValue = this.map[name];
                this.map[name] = oldValue ? oldValue + "," + value : value;
              };
              Headers.prototype["delete"] = function(name) {
                delete this.map[normalizeName(name)];
              };
              Headers.prototype.get = function(name) {
                name = normalizeName(name);
                return this.has(name) ? this.map[name] : null;
              };
              Headers.prototype.has = function(name) {
                return this.map.hasOwnProperty(normalizeName(name));
              };
              Headers.prototype.set = function(name, value) {
                this.map[normalizeName(name)] = normalizeValue(value);
              };
              Headers.prototype.forEach = function(callback, thisArg) {
                for (var name in this.map) {
                  if (this.map.hasOwnProperty(name)) {
                    callback.call(thisArg, this.map[name], name, this);
                  }
                }
              };
              Headers.prototype.keys = function() {
                var items = [];
                this.forEach(function(value, name) {
                  items.push(name);
                });
                return iteratorFor(items);
              };
              Headers.prototype.values = function() {
                var items = [];
                this.forEach(function(value) {
                  items.push(value);
                });
                return iteratorFor(items);
              };
              Headers.prototype.entries = function() {
                var items = [];
                this.forEach(function(value, name) {
                  items.push([name, value]);
                });
                return iteratorFor(items);
              };
              if (support.iterable) {
                Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
              }
              function consumed(body) {
                if (body.bodyUsed) {
                  return Promise.reject(new TypeError("Already read"));
                }
                body.bodyUsed = true;
              }
              function fileReaderReady(reader) {
                return new Promise(function(resolve, reject) {
                  reader.onload = function() {
                    resolve(reader.result);
                  };
                  reader.onerror = function() {
                    reject(reader.error);
                  };
                });
              }
              function readBlobAsArrayBuffer(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsArrayBuffer(blob);
                return promise;
              }
              function readBlobAsText(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsText(blob);
                return promise;
              }
              function readArrayBufferAsText(buf) {
                var view = new Uint8Array(buf);
                var chars = new Array(view.length);
                for (var i = 0; i < view.length; i++) {
                  chars[i] = String.fromCharCode(view[i]);
                }
                return chars.join("");
              }
              function bufferClone(buf) {
                if (buf.slice) {
                  return buf.slice(0);
                } else {
                  var view = new Uint8Array(buf.byteLength);
                  view.set(new Uint8Array(buf));
                  return view.buffer;
                }
              }
              function Body() {
                this.bodyUsed = false;
                this._initBody = function(body) {
                  this._bodyInit = body;
                  if (!body) {
                    this._bodyText = "";
                  } else if (typeof body === "string") {
                    this._bodyText = body;
                  } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                    this._bodyBlob = body;
                  } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                    this._bodyFormData = body;
                  } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this._bodyText = body.toString();
                  } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                    this._bodyArrayBuffer = bufferClone(body.buffer);
                    this._bodyInit = new Blob([this._bodyArrayBuffer]);
                  } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                    this._bodyArrayBuffer = bufferClone(body);
                  } else {
                    throw new Error("unsupported BodyInit type");
                  }
                  if (!this.headers.get("content-type")) {
                    if (typeof body === "string") {
                      this.headers.set("content-type", "text/plain;charset=UTF-8");
                    } else if (this._bodyBlob && this._bodyBlob.type) {
                      this.headers.set("content-type", this._bodyBlob.type);
                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                      this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                    }
                  }
                };
                if (support.blob) {
                  this.blob = function() {
                    var rejected = consumed(this);
                    if (rejected) {
                      return rejected;
                    }
                    if (this._bodyBlob) {
                      return Promise.resolve(this._bodyBlob);
                    } else if (this._bodyArrayBuffer) {
                      return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                    } else if (this._bodyFormData) {
                      throw new Error("could not read FormData body as blob");
                    } else {
                      return Promise.resolve(new Blob([this._bodyText]));
                    }
                  };
                  this.arrayBuffer = function() {
                    if (this._bodyArrayBuffer) {
                      return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                    } else {
                      return this.blob().then(readBlobAsArrayBuffer);
                    }
                  };
                }
                this.text = function() {
                  var rejected = consumed(this);
                  if (rejected) {
                    return rejected;
                  }
                  if (this._bodyBlob) {
                    return readBlobAsText(this._bodyBlob);
                  } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                  } else if (this._bodyFormData) {
                    throw new Error("could not read FormData body as text");
                  } else {
                    return Promise.resolve(this._bodyText);
                  }
                };
                if (support.formData) {
                  this.formData = function() {
                    return this.text().then(decode);
                  };
                }
                this.json = function() {
                  return this.text().then(JSON.parse);
                };
                return this;
              }
              var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
              function normalizeMethod(method) {
                var upcased = method.toUpperCase();
                return methods.indexOf(upcased) > -1 ? upcased : method;
              }
              function Request(input, options) {
                options = options || {};
                var body = options.body;
                if (input instanceof Request) {
                  if (input.bodyUsed) {
                    throw new TypeError("Already read");
                  }
                  this.url = input.url;
                  this.credentials = input.credentials;
                  if (!options.headers) {
                    this.headers = new Headers(input.headers);
                  }
                  this.method = input.method;
                  this.mode = input.mode;
                  if (!body && input._bodyInit != null) {
                    body = input._bodyInit;
                    input.bodyUsed = true;
                  }
                } else {
                  this.url = String(input);
                }
                this.credentials = options.credentials || this.credentials || "omit";
                if (options.headers || !this.headers) {
                  this.headers = new Headers(options.headers);
                }
                this.method = normalizeMethod(options.method || this.method || "GET");
                this.mode = options.mode || this.mode || null;
                this.referrer = null;
                if ((this.method === "GET" || this.method === "HEAD") && body) {
                  throw new TypeError("Body not allowed for GET or HEAD requests");
                }
                this._initBody(body);
              }
              Request.prototype.clone = function() {
                return new Request(this, { body: this._bodyInit });
              };
              function decode(body) {
                var form = new FormData();
                body.trim().split("&").forEach(function(bytes) {
                  if (bytes) {
                    var split = bytes.split("=");
                    var name = split.shift().replace(/\+/g, " ");
                    var value = split.join("=").replace(/\+/g, " ");
                    form.append(decodeURIComponent(name), decodeURIComponent(value));
                  }
                });
                return form;
              }
              function parseHeaders(rawHeaders) {
                var headers = new Headers();
                rawHeaders.split(/\r?\n/).forEach(function(line) {
                  var parts = line.split(":");
                  var key = parts.shift().trim();
                  if (key) {
                    var value = parts.join(":").trim();
                    headers.append(key, value);
                  }
                });
                return headers;
              }
              Body.call(Request.prototype);
              function Response(bodyInit, options) {
                if (!options) {
                  options = {};
                }
                this.type = "default";
                this.status = "status" in options ? options.status : 200;
                this.ok = this.status >= 200 && this.status < 300;
                this.statusText = "statusText" in options ? options.statusText : "OK";
                this.headers = new Headers(options.headers);
                this.url = options.url || "";
                this._initBody(bodyInit);
              }
              Body.call(Response.prototype);
              Response.prototype.clone = function() {
                return new Response(this._bodyInit, {
                  status: this.status,
                  statusText: this.statusText,
                  headers: new Headers(this.headers),
                  url: this.url
                });
              };
              Response.error = function() {
                var response = new Response(null, { status: 0, statusText: "" });
                response.type = "error";
                return response;
              };
              var redirectStatuses = [301, 302, 303, 307, 308];
              Response.redirect = function(url, status) {
                if (redirectStatuses.indexOf(status) === -1) {
                  throw new RangeError("Invalid status code");
                }
                return new Response(null, { status, headers: { location: url } });
              };
              self2.Headers = Headers;
              self2.Request = Request;
              self2.Response = Response;
              self2.fetch = function(input, init) {
                return new Promise(function(resolve, reject) {
                  var request = new Request(input, init);
                  var xhr = new XMLHttpRequest();
                  xhr.onload = function() {
                    var options = {
                      status: xhr.status,
                      statusText: xhr.statusText,
                      headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                    };
                    options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                    var body = "response" in xhr ? xhr.response : xhr.responseText;
                    resolve(new Response(body, options));
                  };
                  xhr.onerror = function() {
                    reject(new TypeError("Network request failed"));
                  };
                  xhr.ontimeout = function() {
                    reject(new TypeError("Network request failed"));
                  };
                  xhr.open(request.method, request.url, true);
                  if (request.credentials === "include") {
                    xhr.withCredentials = true;
                  }
                  if ("responseType" in xhr && support.blob) {
                    xhr.responseType = "blob";
                  }
                  request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value);
                  });
                  xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
                });
              };
              self2.fetch.polyfill = true;
            })(typeof self !== "undefined" ? self : this);
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            (function(global) {
              (function(self2) {
                "use strict";
                var nativeURLSearchParams = self2.URLSearchParams ? self2.URLSearchParams : null, isSupportObjectConstructor = nativeURLSearchParams && new nativeURLSearchParams({ a: 1 }).toString() === "a=1", decodesPlusesCorrectly = nativeURLSearchParams && new nativeURLSearchParams("s=%2B").get("s") === "+", __URLSearchParams__ = "__URLSearchParams__", prototype = URLSearchParamsPolyfill.prototype, iterable = !!(self2.Symbol && self2.Symbol.iterator);
                if (nativeURLSearchParams && isSupportObjectConstructor && decodesPlusesCorrectly) {
                  return;
                }
                function URLSearchParamsPolyfill(search) {
                  search = search || "";
                  if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {
                    search = search.toString();
                  }
                  this[__URLSearchParams__] = parseToDict(search);
                }
                prototype.append = function(name, value) {
                  appendTo(this[__URLSearchParams__], name, value);
                };
                prototype.delete = function(name) {
                  delete this[__URLSearchParams__][name];
                };
                prototype.get = function(name) {
                  var dict = this[__URLSearchParams__];
                  return name in dict ? dict[name][0] : null;
                };
                prototype.getAll = function(name) {
                  var dict = this[__URLSearchParams__];
                  return name in dict ? dict[name].slice(0) : [];
                };
                prototype.has = function(name) {
                  return name in this[__URLSearchParams__];
                };
                prototype.set = function set(name, value) {
                  this[__URLSearchParams__][name] = ["" + value];
                };
                prototype.toString = function() {
                  var dict = this[__URLSearchParams__], query = [], i, key, name, value;
                  for (key in dict) {
                    name = encode(key);
                    for (i = 0, value = dict[key]; i < value.length; i++) {
                      query.push(name + "=" + encode(value[i]));
                    }
                  }
                  return query.join("&");
                };
                var forSureUsePolyfill = !decodesPlusesCorrectly;
                var useProxy = !forSureUsePolyfill && nativeURLSearchParams && !isSupportObjectConstructor && self2.Proxy;
                self2.URLSearchParams = useProxy ? (
                  // Safari 10.0 doesn't support Proxy, so it won't extend URLSearchParams on safari 10.0
                  new Proxy(nativeURLSearchParams, {
                    construct: function(target, args) {
                      return new target(new URLSearchParamsPolyfill(args[0]).toString());
                    }
                  })
                ) : URLSearchParamsPolyfill;
                var USPProto = self2.URLSearchParams.prototype;
                USPProto.polyfill = true;
                USPProto.forEach = USPProto.forEach || function(callback, thisArg) {
                  var dict = parseToDict(this.toString());
                  Object.getOwnPropertyNames(dict).forEach(function(name) {
                    dict[name].forEach(function(value) {
                      callback.call(thisArg, value, name, this);
                    }, this);
                  }, this);
                };
                USPProto.sort = USPProto.sort || function() {
                  var dict = parseToDict(this.toString()), keys = [], k, i, j;
                  for (k in dict) {
                    keys.push(k);
                  }
                  keys.sort();
                  for (i = 0; i < keys.length; i++) {
                    this.delete(keys[i]);
                  }
                  for (i = 0; i < keys.length; i++) {
                    var key = keys[i], values = dict[key];
                    for (j = 0; j < values.length; j++) {
                      this.append(key, values[j]);
                    }
                  }
                };
                USPProto.keys = USPProto.keys || function() {
                  var items = [];
                  this.forEach(function(item, name) {
                    items.push([name]);
                  });
                  return makeIterator(items);
                };
                USPProto.values = USPProto.values || function() {
                  var items = [];
                  this.forEach(function(item) {
                    items.push([item]);
                  });
                  return makeIterator(items);
                };
                USPProto.entries = USPProto.entries || function() {
                  var items = [];
                  this.forEach(function(item, name) {
                    items.push([name, item]);
                  });
                  return makeIterator(items);
                };
                if (iterable) {
                  USPProto[self2.Symbol.iterator] = USPProto[self2.Symbol.iterator] || USPProto.entries;
                }
                function encode(str) {
                  var replace = {
                    "!": "%21",
                    "'": "%27",
                    "(": "%28",
                    ")": "%29",
                    "~": "%7E",
                    "%20": "+",
                    "%00": "\0"
                  };
                  return encodeURIComponent(str).replace(/[!'\(\)~]|%20|%00/g, function(match) {
                    return replace[match];
                  });
                }
                function decode(str) {
                  return decodeURIComponent(str.replace(/\+/g, " "));
                }
                function makeIterator(arr) {
                  var iterator = {
                    next: function() {
                      var value = arr.shift();
                      return { done: value === void 0, value };
                    }
                  };
                  if (iterable) {
                    iterator[self2.Symbol.iterator] = function() {
                      return iterator;
                    };
                  }
                  return iterator;
                }
                function parseToDict(search) {
                  var dict = {};
                  if (typeof search === "object") {
                    for (var i in search) {
                      if (search.hasOwnProperty(i)) {
                        var str = typeof search[i] === "string" ? search[i] : JSON.stringify(search[i]);
                        appendTo(dict, i, str);
                      }
                    }
                  } else {
                    if (search.indexOf("?") === 0) {
                      search = search.slice(1);
                    }
                    var pairs = search.split("&");
                    for (var j = 0; j < pairs.length; j++) {
                      var value = pairs[j], index = value.indexOf("=");
                      if (-1 < index) {
                        appendTo(dict, decode(value.slice(0, index)), decode(value.slice(index + 1)));
                      } else {
                        if (value) {
                          appendTo(dict, decode(value), "");
                        }
                      }
                    }
                  }
                  return dict;
                }
                function appendTo(dict, name, value) {
                  if (name in dict) {
                    dict[name].push("" + value);
                  } else {
                    dict[name] = ["" + value];
                  }
                }
              })(typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : this);
            }).call(exports2, __webpack_require__(11));
          },
          /* 11 */
          /***/
          function(module2, exports2) {
            var g;
            g = /* @__PURE__ */ function() {
              return this;
            }();
            try {
              g = g || Function("return this")() || (1, eval)("this");
            } catch (e) {
              if (typeof window === "object")
                g = window;
            }
            module2.exports = g;
          },
          /* 12 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _extends = Object.assign || function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var _react = __webpack_require__(0);
            var _react2 = _interopRequireDefault(_react);
            var _reactIconBase = __webpack_require__(13);
            var _reactIconBase2 = _interopRequireDefault(_reactIconBase);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var FaTwitter = function FaTwitter2(props) {
              return _react2.default.createElement(
                _reactIconBase2.default,
                _extends({ viewBox: "0 0 40 40" }, props),
                _react2.default.createElement(
                  "g",
                  null,
                  _react2.default.createElement("path", { d: "m37.7 9.1q-1.5 2.2-3.7 3.7 0.1 0.3 0.1 1 0 2.9-0.9 5.8t-2.6 5.5-4.1 4.7-5.7 3.3-7.2 1.2q-6.1 0-11.1-3.3 0.8 0.1 1.7 0.1 5 0 9-3-2.4-0.1-4.2-1.5t-2.6-3.5q0.8 0.1 1.4 0.1 1 0 1.9-0.3-2.5-0.5-4.1-2.5t-1.7-4.6v0q1.5 0.8 3.3 0.9-1.5-1-2.4-2.6t-0.8-3.4q0-2 0.9-3.7 2.7 3.4 6.6 5.4t8.3 2.2q-0.2-0.9-0.2-1.7 0-3 2.1-5.1t5.1-2.1q3.2 0 5.3 2.3 2.4-0.5 4.6-1.7-0.8 2.5-3.2 3.9 2.1-0.2 4.2-1.1z" })
                )
              );
            };
            exports2.default = FaTwitter;
            module2.exports = exports2["default"];
          },
          /* 13 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _extends = Object.assign || function(target) {
              for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                  }
                }
              }
              return target;
            };
            var _react = __webpack_require__(0);
            var _react2 = _interopRequireDefault(_react);
            var _propTypes = __webpack_require__(1);
            var _propTypes2 = _interopRequireDefault(_propTypes);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _objectWithoutProperties(obj, keys) {
              var target = {};
              for (var i in obj) {
                if (keys.indexOf(i) >= 0)
                  continue;
                if (!Object.prototype.hasOwnProperty.call(obj, i))
                  continue;
                target[i] = obj[i];
              }
              return target;
            }
            var IconBase = function IconBase2(_ref, _ref2) {
              var children = _ref.children;
              var color = _ref.color;
              var size = _ref.size;
              var style = _ref.style;
              var width = _ref.width;
              var height = _ref.height;
              var props = _objectWithoutProperties(_ref, ["children", "color", "size", "style", "width", "height"]);
              var _ref2$reactIconBase = _ref2.reactIconBase;
              var reactIconBase = _ref2$reactIconBase === void 0 ? {} : _ref2$reactIconBase;
              var computedSize = size || reactIconBase.size || "1em";
              return _react2.default.createElement("svg", _extends({
                children,
                fill: "currentColor",
                preserveAspectRatio: "xMidYMid meet",
                height: height || computedSize,
                width: width || computedSize
              }, reactIconBase, props, {
                style: _extends({
                  verticalAlign: "middle",
                  color: color || reactIconBase.color
                }, reactIconBase.style || {}, style)
              }));
            };
            IconBase.propTypes = {
              color: _propTypes2.default.string,
              size: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
              width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
              height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
              style: _propTypes2.default.object
            };
            IconBase.contextTypes = {
              reactIconBase: _propTypes2.default.shape(IconBase.propTypes)
            };
            exports2.default = IconBase;
            module2.exports = exports2["default"];
          }
          /******/
        ])
      );
    });
  }
});
export default require_react_twitter_auth_component();
/*! Bundled license information:

react-twitter-auth/lib/react-twitter-auth-component.js:
  (** @license React v16.8.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=react-twitter-auth.js.map
