{
  "version": 3,
  "sources": ["../../../@web3-onboard/ledger/dist/v1.js", "../../../@web3-onboard/ledger/dist/v2.js", "../../../@web3-onboard/ledger/dist/index.js"],
  "sourcesContent": ["import { isHexString } from './index.js';\nfunction ledger(options = { walletConnectVersion: 1 }) {\n    return () => {\n        return {\n            label: 'Ledger',\n            getIcon: async () => (await import('./icon.js')).default,\n            getInterface: async ({ chains, EventEmitter }) => {\n                const { loadConnectKit, SupportedProviders, SupportedProviderImplementations } = await import('@ledgerhq/connect-kit-loader');\n                const connectKit = await loadConnectKit();\n                if (options.enableDebugLogs) {\n                    connectKit.enableDebugLogs();\n                }\n                const checkSupportResult = connectKit.checkSupport({\n                    providerType: SupportedProviders.Ethereum,\n                    chainId: options === null || options === void 0 ? void 0 : options.chainId,\n                    infuraId: options === null || options === void 0 ? void 0 : options.infuraId,\n                    rpc: options === null || options === void 0 ? void 0 : options.rpc\n                });\n                // get the Ledger provider instance, it can be either Ledger Connect\n                // or WalletConnect\n                const instance = (await connectKit.getProvider());\n                // return the Ledger Extension provider\n                if (checkSupportResult.providerImplementation ===\n                    SupportedProviderImplementations.LedgerConnect) {\n                    return {\n                        provider: instance\n                    };\n                }\n                // fallback to WalletConnect on unsupported platforms\n                const { StaticJsonRpcProvider } = await import('@ethersproject/providers');\n                const { ProviderRpcError, ProviderRpcErrorCode } = await import('@web3-onboard/common');\n                const { default: WalletConnect } = await import('@walletconnect/client');\n                const { Subject, fromEvent } = await import('rxjs');\n                const { takeUntil, take } = await import('rxjs/operators');\n                const connector = instance.connector;\n                const emitter = new EventEmitter();\n                class EthProvider {\n                    constructor({ connector, chains }) {\n                        this.emit = emitter.emit.bind(emitter);\n                        this.on = emitter.on.bind(emitter);\n                        this.removeListener = emitter.removeListener.bind(emitter);\n                        this.connector = connector;\n                        this.chains = chains;\n                        this.disconnected$ = new Subject();\n                        this.providers = {};\n                        let activeChain;\n                        // listen for session updates\n                        fromEvent(this.connector, 'session_update', (error, payload) => {\n                            if (error) {\n                                throw error;\n                            }\n                            return payload;\n                        })\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: ({ params }) => {\n                                const [{ accounts, chainId }] = params;\n                                const lowerCaseAccounts = accounts.map((accountAddress) => accountAddress.toLowerCase());\n                                this.emit('accountsChanged', lowerCaseAccounts);\n                                const hexChainId = isHexString(chainId)\n                                    ? chainId\n                                    : `0x${chainId.toString(16)}`;\n                                if (!activeChain || activeChain !== hexChainId) {\n                                    this.emit('chainChanged', hexChainId);\n                                    activeChain = hexChainId;\n                                }\n                            },\n                            error: console.warn\n                        });\n                        // listen for disconnect event\n                        fromEvent(this.connector, 'disconnect', (error, payload) => {\n                            if (error) {\n                                throw error;\n                            }\n                            return payload;\n                        })\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: () => {\n                                this.emit('accountsChanged', []);\n                                this.disconnected$.next(true);\n                                typeof localStorage !== 'undefined' &&\n                                    localStorage.removeItem('walletconnect');\n                            },\n                            error: console.warn\n                        });\n                        this.disconnect = () => this.connector.killSession();\n                        this.request = async ({ method, params }) => {\n                            if (method === 'eth_chainId') {\n                                return isHexString(this.connector.chainId)\n                                    ? this.connector.chainId\n                                    : `0x${this.connector.chainId.toString(16)}`;\n                            }\n                            if (method === 'eth_requestAccounts') {\n                                return new Promise((resolve, reject) => {\n                                    // Subscribe to connection events\n                                    fromEvent(this.connector, 'connect', (error, payload) => {\n                                        if (error) {\n                                            throw error;\n                                        }\n                                        return payload;\n                                    })\n                                        .pipe(take(1))\n                                        .subscribe({\n                                        next: ({ params }) => {\n                                            const [{ accounts, chainId }] = params;\n                                            const lowerCaseAccounts = accounts.map((accountAddress) => accountAddress.toLowerCase());\n                                            this.emit('accountsChanged', lowerCaseAccounts);\n                                            const hexChainId = isHexString(chainId)\n                                                ? chainId\n                                                : `0x${chainId.toString(16)}`;\n                                            if (!activeChain)\n                                                activeChain = hexChainId;\n                                            this.emit('chainChanged', hexChainId);\n                                            resolve(lowerCaseAccounts);\n                                        },\n                                        error: reject\n                                    });\n                                    // Check if connection is already established\n                                    if (!this.connector.connected) {\n                                        resolve(instance.request({ method, params }));\n                                    }\n                                    else {\n                                        const { accounts, chainId } = this.connector.session;\n                                        const hexChainId = isHexString(chainId)\n                                            ? chainId\n                                            : `0x${chainId.toString(16)}`;\n                                        this.emit('chainChanged', hexChainId);\n                                        if (!activeChain)\n                                            activeChain = hexChainId;\n                                        const lowerCaseAccounts = accounts.map((accountAddress) => accountAddress.toLowerCase());\n                                        return resolve(lowerCaseAccounts);\n                                    }\n                                });\n                            }\n                            if (method === 'eth_selectAccounts') {\n                                throw new ProviderRpcError({\n                                    code: ProviderRpcErrorCode.UNSUPPORTED_METHOD,\n                                    message: `The Provider does not support the requested method: ${method}`\n                                });\n                            }\n                            if (method == 'wallet_switchEthereumChain') {\n                                if (!params) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                const chainIdObj = params[0];\n                                if (!chainIdObj.hasOwnProperty('chainId') ||\n                                    typeof chainIdObj['chainId'] === 'undefined') {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                return this.connector.sendCustomRequest({\n                                    method: 'wallet_switchEthereumChain',\n                                    params: [\n                                        {\n                                            chainId: chainIdObj.chainId\n                                        }\n                                    ]\n                                });\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_sendTransaction') {\n                                // @ts-ignore\n                                return this.connector.sendTransaction(params[0]);\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_signTransaction') {\n                                // @ts-ignore\n                                return this.connector.signTransaction(params[0]);\n                            }\n                            // @ts-ignore\n                            if (method === 'personal_sign') {\n                                // @ts-ignore\n                                return this.connector.signPersonalMessage(params);\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_sign') {\n                                // @ts-ignore\n                                return this.connector.signMessage(params);\n                            }\n                            // @ts-ignore\n                            if (method.includes('eth_signTypedData')) {\n                                // @ts-ignore\n                                return this.connector.signTypedData(params);\n                            }\n                            if (method === 'eth_accounts') {\n                                return this.connector.sendCustomRequest({\n                                    id: 1337,\n                                    jsonrpc: '2.0',\n                                    method,\n                                    params\n                                });\n                            }\n                            const chainId = await this.request({ method: 'eth_chainId' });\n                            if (!this.providers[chainId]) {\n                                const currentChain = chains.find(({ id }) => id === chainId);\n                                if (!currentChain) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.CHAIN_NOT_ADDED,\n                                        message: `The Provider does not have a rpcUrl to make a request for the requested method: ${method}`\n                                    });\n                                }\n                                this.providers[chainId] = new StaticJsonRpcProvider(currentChain.rpcUrl);\n                            }\n                            return this.providers[chainId].send(method, \n                            // @ts-ignore\n                            params);\n                        };\n                    }\n                }\n                return {\n                    provider: new EthProvider({ chains, connector })\n                };\n            }\n        };\n    };\n}\nexport default ledger;\n", "import { isHexString } from './index.js';\n// methods that require user interaction\nconst defaultOptionalMethods = [\n    'eth_sendTransaction',\n    'eth_signTransaction',\n    'personal_sign',\n    'eth_sign',\n    'eth_signTypedData',\n    'eth_signTypedData_v4'\n];\nfunction ledger(options) {\n    if (!(options === null || options === void 0 ? void 0 : options.projectId)) {\n        throw new Error('WalletConnect requires a projectId. Please visit https://cloud.walletconnect.com to get one.');\n    }\n    return () => {\n        return {\n            label: 'Ledger',\n            getIcon: async () => (await import('./icon.js')).default,\n            getInterface: async ({ chains, EventEmitter }) => {\n                var _a;\n                const { loadConnectKit, SupportedProviders, SupportedProviderImplementations } = await import('@ledgerhq/connect-kit-loader');\n                const connectKit = await loadConnectKit();\n                if (options === null || options === void 0 ? void 0 : options.enableDebugLogs) {\n                    connectKit.enableDebugLogs();\n                }\n                // accept both hex and decimal chain ids\n                const requiredChains = (_a = options === null || options === void 0 ? void 0 : options.requiredChains) === null || _a === void 0 ? void 0 : _a.map(id => typeof id === 'string' && isHexString(id)\n                    ? parseInt(id, 16)\n                    : id);\n                const optionalMethods = options.optionalMethods && Array.isArray(options.optionalMethods)\n                    ? [...options.optionalMethods, ...defaultOptionalMethods]\n                    : defaultOptionalMethods;\n                const checkSupportResult = connectKit.checkSupport({\n                    providerType: SupportedProviders.Ethereum,\n                    walletConnectVersion: 2,\n                    projectId: options === null || options === void 0 ? void 0 : options.projectId,\n                    chains: requiredChains,\n                    optionalChains: chains.map(({ id }) => parseInt(id, 16)),\n                    methods: options === null || options === void 0 ? void 0 : options.requiredMethods,\n                    optionalMethods,\n                    events: options === null || options === void 0 ? void 0 : options.requiredEvents,\n                    optionalEvents: options === null || options === void 0 ? void 0 : options.optionalEvents,\n                    rpcMap: chains\n                        .map(({ id, rpcUrl }) => ({ id, rpcUrl }))\n                        .reduce((rpcMap, { id, rpcUrl }) => {\n                        rpcMap[parseInt(id, 16)] = rpcUrl || '';\n                        return rpcMap;\n                    }, {})\n                });\n                // get the provider instance, it can be either the Ledger Extension\n                // or WalletConnect\n                const instance = (await connectKit.getProvider());\n                // return the Ledger Extension provider\n                if (checkSupportResult.providerImplementation ===\n                    SupportedProviderImplementations.LedgerConnect) {\n                    return {\n                        provider: instance\n                    };\n                }\n                const { ProviderRpcError, ProviderRpcErrorCode } = await import('@web3-onboard/common');\n                const { default: EthereumProvider } = await import('@walletconnect/ethereum-provider');\n                const { Subject, fromEvent } = await import('rxjs');\n                const { takeUntil, take } = await import('rxjs/operators');\n                const connector = instance;\n                const emitter = new EventEmitter();\n                class EthProvider {\n                    constructor({ connector, chains }) {\n                        this.emit = emitter.emit.bind(emitter);\n                        this.on = emitter.on.bind(emitter);\n                        this.removeListener = emitter.removeListener.bind(emitter);\n                        this.connector = connector;\n                        this.chains = chains;\n                        this.disconnected$ = new Subject();\n                        // listen for accountsChanged\n                        fromEvent(this.connector, 'accountsChanged', payload => payload)\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: accounts => {\n                                this.emit('accountsChanged', accounts);\n                            },\n                            error: console.warn\n                        });\n                        // listen for chainChanged\n                        fromEvent(this.connector, 'chainChanged', (payload) => payload)\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: chainId => {\n                                const hexChainId = isHexString(chainId)\n                                    ? chainId\n                                    : `0x${chainId.toString(16)}`;\n                                this.emit('chainChanged', hexChainId);\n                            },\n                            error: console.warn\n                        });\n                        // listen for disconnect event\n                        fromEvent(this.connector, 'session_delete', (payload) => payload)\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: () => {\n                                this.emit('accountsChanged', []);\n                                this.disconnected$.next(true);\n                                typeof localStorage !== 'undefined' &&\n                                    localStorage.removeItem('walletconnect');\n                            },\n                            error: console.warn\n                        });\n                        this.disconnect = () => {\n                            if (this.connector.session)\n                                this.connector.disconnect();\n                        };\n                        const checkForSession = () => {\n                            const session = this.connector.session;\n                            if (session) {\n                                this.emit('accountsChanged', this.connector.accounts);\n                                this.emit('chainChanged', this.connector.chainId);\n                            }\n                        };\n                        checkForSession();\n                        this.request = async ({ method, params }) => {\n                            if (method === 'eth_chainId') {\n                                return isHexString(this.connector.chainId)\n                                    ? this.connector.chainId\n                                    : `0x${this.connector.chainId.toString(16)}`;\n                            }\n                            if (method === 'eth_requestAccounts') {\n                                return new Promise(async (resolve, reject) => {\n                                    // Subscribe to connection events\n                                    fromEvent(this.connector, 'connect', (payload) => payload)\n                                        .pipe(take(1))\n                                        .subscribe({\n                                        next: ({ chainId }) => {\n                                            this.emit('accountsChanged', this.connector.accounts);\n                                            const hexChainId = isHexString(chainId)\n                                                ? chainId\n                                                : `0x${chainId.toString(16)}`;\n                                            this.emit('chainChanged', hexChainId);\n                                            resolve(this.connector.accounts);\n                                        },\n                                        error: reject\n                                    });\n                                    // Check if connection is already established\n                                    if (!this.connector.session) {\n                                        await instance.request({ method }).catch((err) => {\n                                            console.error('err creating new session: ', err);\n                                            reject(new ProviderRpcError({\n                                                code: 4001,\n                                                message: 'User rejected the request.'\n                                            }));\n                                        });\n                                    }\n                                    else {\n                                        // update ethereum provider to load accounts & chainId\n                                        const accounts = this.connector.accounts;\n                                        const chainId = this.connector.chainId;\n                                        const hexChainId = `0x${chainId.toString(16)}`;\n                                        this.emit('chainChanged', hexChainId);\n                                        return resolve(accounts);\n                                    }\n                                });\n                            }\n                            if (method === 'eth_selectAccounts') {\n                                throw new ProviderRpcError({\n                                    code: ProviderRpcErrorCode.UNSUPPORTED_METHOD,\n                                    message: `The Provider does not support the requested method: ${method}`\n                                });\n                            }\n                            if (method == 'wallet_switchEthereumChain') {\n                                if (!params) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                const chainIdObj = params[0];\n                                if (!chainIdObj.hasOwnProperty('chainId') ||\n                                    typeof chainIdObj['chainId'] === 'undefined') {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.INVALID_PARAMS,\n                                        message: `The Provider requires a chainId to be passed in as an argument`\n                                    });\n                                }\n                                return this.connector.request({\n                                    method: 'wallet_switchEthereumChain',\n                                    params: [\n                                        {\n                                            chainId: chainIdObj.chainId\n                                        }\n                                    ]\n                                });\n                            }\n                            return this.connector.request({\n                                method,\n                                params\n                            });\n                        };\n                    }\n                }\n                return {\n                    provider: new EthProvider({ chains, connector })\n                };\n            }\n        };\n    };\n}\nexport default ledger;\n", "import v1 from './v1.js';\nimport v2 from './v2.js';\nexport const isHexString = (value) => {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    return true;\n};\nfunction ledger(options) {\n    const walletConnectVersion = (options === null || options === void 0 ? void 0 : options.walletConnectVersion) || 2;\n    return walletConnectVersion === 1\n        ? v1(options)\n        : v2(options);\n}\nexport default ledger;\n"],
  "mappings": "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",
  "names": ["connector", "chains", "params", "chainId", "ledger", "connector", "chains", "ledger"]
}
